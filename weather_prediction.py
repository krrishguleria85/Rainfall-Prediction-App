# -*- coding: utf-8 -*-
"""weather_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pZ_FIFcDh6G7ZuOUZxgirx0t6y3WikWw
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, mean_squared_error
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

data = pd.read_csv('weather.csv')

print(data.shape,'\n')

print(data.columns,'\n')

data.info()

data.describe()

# check missing values
data.isnull().sum()

# handle missing values
data['WindGustDir']=data['WindGustDir'].fillna(data['WindGustDir'].mode()[0])
data['WindGustSpeed']=data['WindGustSpeed'].fillna(data['WindGustSpeed'].mean())

data.isnull().sum()

# check for duplicate values
data.duplicated().sum()

convert = {'Yes': 1, 'No': 0}
data['RainTomorrow'] = data['RainTomorrow'].map(convert)

data.head(15)

# EXPLORATORY DATA ANALYSIS
sns.pairplot(data, hue='RainTomorrow',palette='bwr')

# 1. Distribution of a numerical variable (e.g., 'MaxTemp', 'MinTemp', 'Temp', 'Humidity', 'Pressure')
plt.figure(figsize=(8, 6))
columns_to_plot = ['MaxTemp', 'MinTemp', 'Temp', 'Humidity', 'Pressure']
data[columns_to_plot].hist(bins=20, figsize=(15, 10), grid=False, edgecolor='black')
plt.suptitle('Histograms of Weather Variables', fontsize=16)
plt.tight_layout()
plt.grid(True)
plt.show()

# 2. Relationship between a numerical and a categorical variable (e.g., Humidity vs. RainTomorrow)
plt.figure(figsize=(8,6))
sns.boxplot(x='RainTomorrow', y='Humidity', data=data)
plt.title('Humidity vs. Rain Tomorrow')
plt.xlabel('Rain Tomorrow')
plt.ylabel('Humidity (%)')
plt.grid(True)
plt.show()

# 3. distribution between temp vs humidity
plt.figure(figsize=(8,6))
sns.scatterplot(x='Temp', y='Humidity', data=data, hue='RainTomorrow', palette='viridis')
plt.title('Temperature vs. Humidity')
plt.xlabel('Temperature (Â°C)')
plt.ylabel('Humidity (%)')
plt.grid(True)
plt.show()

"""MODEL TRAINING"""

# --- 1. Encode Categorical Data ---
# Convert 'WindGustDir' into numerical columns.
data_encoded = pd.get_dummies(data, columns=['WindGustDir'], drop_first=True)

print("Data after encoding WindGustDir:")
print(data_encoded.head())

# --- 2. Define Features (X) and Target (y) ---
X = data_encoded.drop('RainTomorrow', axis=1)
y = data_encoded['RainTomorrow']

# --- 3. Split Data into Training and Testing Sets ---
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(f"\nTraining data shape: {X_train.shape}")
print(f"Testing data shape: {X_test.shape}")

# --- 4. Train the Logistic Regression Model ---
# Initialize the model
model = LogisticRegression(max_iter=1000)

# Train the model on the training data
model.fit(X_train, y_train)
print("\nModel training complete!")

# --- 5. Make Predictions and Evaluate the Model ---
# Make predictions on the test data
y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print(f"\nModel Accuracy: {accuracy * 100:.2f}%")

print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# --- 6. SAVING THE MODEL (Corrected Version) ---
import joblib

features = X.columns.tolist()

model_filename = 'weather_prediction_model.joblib'

joblib.dump({'model': model, 'features': features}, model_filename)

print(f"\n--- Model Saved ---")
print(f"The trained model has been saved as '{model_filename}'")